# -*- coding: utf-8 -*-
"""linked_list.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOIIP6TFhVzjLrg1kIPZ0T9PaxjsqxAo
"""


class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next


class linkedlist:
    def __init__(self):
        self.head = None
        return

    def add_at_start(self, data):
        node = Node(data, self.head)
        self.head = node
        return

    def add_at_end(self, data):
        if self.head is None:
            self.head = Node(data, None)
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = Node(data, None)
        return

    def add_at_anypoint(self, data, index):
        if index == 0:
            self.add_at_start(data)
            return
        if self.head is None:
            self.head = Node(data, None)
            return
        curr = self.head
        for i in range(0, index - 1):
            curr = curr.next

        head = Node(data)
        prvious = curr.next
        curr.next = head
        head.next = prvious
        return

    def delete_node_start(self):
        cur = self.head
        self.head = cur.next
        cur = None
        return

    def delete_node_end(self):
        cur = self.head
        if self.head != None:
            if self.head.next != None:
                while cur.next.next != None:
                    cur = cur.next
                las = cur.next
                cur.next = None
                las = None
                return
            else:
                self.head.next = None
                return
        else:
            print("Linked list is already empty: ")
            return

    def delete_at_anypoint(self,index):
        if index==0:
            self.delete_node_start()
            return
        cur=self.head
        for i in range(0,index-1):
            cur=cur.next
        previous=cur
        previous.next=cur.next.next
        return

    def print(self):
        if self.head is None:
            print("Linked list is empty")
            return
        curr = self.head
        data = ""
        while curr:
            data += str(curr.data) + "-->"
            curr = curr.next
        print(data)
        return


if __name__ == '__main__':
    ll = linkedlist()
    print("Adding data at start of linked list")
    ll.add_at_start(3)
    ll.add_at_start(34)
    ll.add_at_start(55)
    ll.add_at_start(68)
    ll.add_at_start(85)
    ll.add_at_start(98)
    print("Printing linked list: ")
    ll.print()
    print("Adding data at end of linked list")
    ll.add_at_end(7)
    ll.add_at_end(85)
    ll.add_at_end(35)
    ll.add_at_end(96)
    print("Printing linked list: ")
    ll.print()


    print("Deleting from start of linked list: ")
    ll.delete_node_start()
    print("Printing linked list: ")
    ll.print()

    print("Deleting from end of linked list: ")
    ll.delete_node_end()
    print("Printing linked list: ")
    ll.print()
    try:
        print("Deleting from anypoint of linked list: ")
        print("Eneter index from which you want to delete node from: ")
        inf=int(input())
        ll.delete_at_anypoint(inf)
        print("Printing link list: ")
        ll.print()
    except(IndexError,AttributeError):
        print("Index given is out of range")
